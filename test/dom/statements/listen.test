UTest({
	'Browser': {
		'simple expression': {
			$before (done) {
				var template = `
					section {
						listen (letter) {
								span.test > '~letter.name';
						}
					}
				`;
				var model = { letter: { name: 'A' } };

				var compo = Compo.initialize(template, model);
				done(compo);
			},
			'should be rendered' (done, compo) {
				eq_(compo.model.letter.name, 'A');
				is_(compo.model.__observers.letter, 'Array');
				eq_(compo.model.__observers.letter.length, 1);
				compo.$.eq_('text', 'A');
				done(compo);
			},
			'should modify letter' (done, compo) {
				compo.model.letter = { name: 'B'};
				eq_(compo.model.letter.name, 'B');
				compo.$.eq_('text', 'B');
				done(compo);
			},
			'should remove observers' (done, compo) {
				compo.remove();
				eq_(compo.model.letter.name, 'B');
				is_(compo.model.__observers.letter, 'Array');
				eq_(compo.model.__observers.letter.length, 0);
				done(compo);
			}
		},
		'expression with multiple statements': {
			$before (done) {
				var template = `
					section {
						listen (letter, letter.name, qux) {
							span.test > '~letter.name ~qux';
						}
					}
				`;
				var model = { letter: { name: 'A' }, qux: 'Qux' };
				var compo = Compo.initialize(template, model);
				done(compo);
			},
			'should be rendered' (done, compo) {
				eq_(compo.model.letter.name, 'A');
				is_(compo.model.__observers['letter'], 'Array');
				eq_(compo.model.__observers['letter'].length, 1);
				is_(compo.model.__observers['letter.name'], 'Array');
				eq_(compo.model.__observers['letter.name'].length, 1);
				is_(compo.model.__observers['qux'], 'Array');
				eq_(compo.model.__observers['qux'].length, 1);


				compo.$.eq_('text', 'A Qux');
				done(compo);
			},
			'should modify letter object and qux' (done, compo) {
				compo.model.letter = { name: 'B'};
				compo.model.qux = 'Bar';
				compo.$.eq_('text', 'B Bar');
				done(compo);
			},
			'should modify letter property' (done, compo) {
				compo.model.letter.name = 'C';
				compo.$.eq_('text', 'C Bar');
				done(compo);
			},
			'should remove observers' (done, compo) {
				compo.remove();
				is_(compo.model.__observers['letter'], 'Array');
				eq_(compo.model.__observers['letter'].length, 0);
				is_(compo.model.__observers['letter.name'], 'Array');
				eq_(compo.model.__observers['letter.name'].length, 0);
				is_(compo.model.__observers['qux'], 'Array');
				eq_(compo.model.__observers['qux'].length, 0);
				done(compo);
			}
		}
	},
	'//Server': {
		// Backend
		'$config': {
			'http.include': [ '/test/node.libraries.js' ]
		},

		'listen - backend' () {

			var template = `
				section {
					listen foo (letter) {
							span.test > '~letter.name';
					}
				}
			`;
			var model = { letter: { name: 'A' } };

			return $renderServer(template, { model })
				.done((el, doc, win) => {
					var $dom = $(el);

					notEq_(win.app, null);
					eq_(win.app.model.letter.name, 'A');
					is_(win.app.model.__observers['letter'], 'Array');
					eq_(win.app.model.__observers['letter'].length, 1);

					$dom.eq_('text', 'A');

					win.app.model.letter = { name: 'B' };
					$dom.eq_('text', 'B');

					win.app.remove();
					is_(win.app.model.__observers['letter'], 'Array');
					eq_(win.app.model.__observers['letter'].length, 0);
				})
		}
	}
});