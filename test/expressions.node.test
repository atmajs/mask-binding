
global.window = global;

include

.routes({
	util: '/src/util/{0}.js'
})

.inject({
	_ : '/src/vars.js',
	util: ['array', 'object', 'expression']
})

.done(function(){
	
	UTest({
		
		'array - observer': function(){
			var array = [],
				check, callback
			
			function createAssertion(current, fn, args) {
				
				return assert.callback(function(_current, _fn, _args){
					eq(_current.join(''), current.join(''));
					eq(fn, _fn);
					deepEq(args, _args);
				});
				
			};
			
			arr_addObserver(array, callback = function(){
				check.apply(this, arguments);
			});
			
			eq(array.__observers.length, 1);
			eq(array.__observers[0], callback);
			
			check = createAssertion([1], 'push', [1]);
			array.push(1);
			
			check = createAssertion([], 'pop', []);
			array.pop();
			
			check = createAssertion([1,2,3], 'splice', [0, 0, 1, 2, 3]);
			array.splice(0,0, 1,2,3);
			
			check = createAssertion([5, 1,2,3], 'unshift', [5]);
			array.unshift(5);
			
			check = createAssertion([1,2,3], 'shift', []);
			array.shift();
			
			check = createAssertion([3, 2, 1], 'reverse', []);
			array.reverse();
			
			check = createAssertion([1,2,3], 'sort', []);
			array.sort();
			
			
			
			// locking >>
			arr_lockObservers(array);
			
			eq(array.__observers.__dirty, false);
			check = function() { eq('Should not be called'); }
			array.push('4');
			
			check = createAssertion([1, 2, 3, 4]);
			arr_unlockObservers(array);
			// <<
			
			
			arr_removeObserver(array, callback);
			eq(array.__observers.length, 0);
		},
		
		
		'expression': function(){
			
			
			var model, check, callback, expression;
			
			function createAssertion(expect, assertFn) {
				return assert.callback(function(value){
					(assertFn || eq)(expect, value);
				});
			}
			
			function createBinder(expression, model, cb) {
				return (callback = expression_createBinder(expression, model, null, null, cb));
			}
			
			function bind(expression, model) {
				expression_bind(expression, model, null, null, createBinder(expression, model, function(){
					check.apply(this, arguments);
				}));
			}
			
			
			model = {x: 1, y: {sub: 2}};
			expression = 'x + y.sub'; 
			bind(expression, model);
			
			eq(model.__observers['x'].length, 1);
			eq(model.__observers['y.sub'].length, 1);
			
			
			check = createAssertion(5);
			model.x = 3;
			
			check = createAssertion(0);
			model.y.sub -= 5;
			
			
			expression_unbind(expression, model, callback);
			eq(model.__observers['x'].length, 0);
			eq(model.__observers['y.sub'].length, 0);
			
			
			expression = '.';
			model = [1];
			bind(expression, model);
			
			check = createAssertion([1, 2], function(a,b){
				eq(a.join(''), b.join(''));
			});
			
			model.push(2);
			
		}
		
	})
	
})