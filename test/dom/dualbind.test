UTest({
	'input text' () {
		var model = { foo: 'Foo' };
		var Ctor = Compo({
			template: "input > :dualbind value=foo",
			model: model,
		});
		var compo = mask.Compo.initialize(Ctor);
		notEq_(compo.$, null);
		
		var input = compo.$[0];
		
		eq_(input.value, 'Foo');
		
		model.foo = 'Baz';
		eq_(input.value, 'Baz');
		
		input.value = 'Quux';
		$(input).trigger('change');
		eq_(model.foo, 'Quux');
		
		eq_(compo.components.length, 1);
		eq_(model.__observers.foo.length, 1);
		
		compo.remove();
		eq_(model.__observers.foo.length, 0);
		
		'> dispose via jquery'
		var compo = mask.Compo.initialize(Ctor);
		eq_(model.__observers.foo.length, 1);
		compo.$.removeAndDispose();
		eq_(model.__observers.foo.length, 0);
	},
	
	'input date (debounced)' (done) {
		var model = { foo: new Date(2014, 1, 1) };
		var Ctor = Compo({
			template: "input type=date > :dualbind value=foo",
			model: model,
		});
		var compo = mask.Compo.initialize(Ctor);
		var input = compo.$[0];
		
		checkDates();
		
		'> change DOM'
		input.value = '2017-04-03';
		$(input).trigger('change');
		var date = checkDates();
		eq_(date.getFullYear(), 2017);
		
		'> change Object'
		model.foo.setFullYear(2020);
		setTimeout(function(){
			has_(input.value, '2020');
			done();
		});
		
		
		function checkDates() {
			var date = new Date(input.value);
			eq_(date.getFullYear(), model.foo.getFullYear());
			eq_(date.getMonth(), model.foo.getMonth());
			eq_(date.getDate(), model.foo.getDate());
			return date;
		}
	}
})