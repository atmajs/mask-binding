
UTest({
	'+if' () {
		
		var template = `
				div { 
					+if (foo == 1) > h1; 
					else (foo == 2) > h2; 
					else > h3;
				}
			`,
		
			model = {
				foo: 2
			},
			controller = {};
		
		$dom = $render(template, model, null, null, controller);
		
		eq_(model.__observers.foo.length, 1);
		
		
		$has('h1', false);
		$has('h2', true);
		$has('h3', false);
			
		model.foo = 1;
		$has('h1', true);
		$has('h2', true);
		$has('h3', false);
		$visible('h2', false);
		
		model.foo = 3;
		$has('h1', true);
		$has('h2', true);
		$has('h3', true);
		$visible('h1', false);
		$visible('h2', false);
		
		
		model.foo = 1;
		$visible('h1', true);
		$visible('h2', false);
		$visible('h3', false);
		
		Compo.dispose(controller);
		eq_(model.__observers.foo.length, 0);
	},
	
	'+if single': function(){
		var template = `
			div >
				+if (message) {
					.baz > '~[bind:message]'
				}
			`,
			model = {message: false};
		
		var $dom = $render(template, model);
		eq_(model.__observers.message.length, 1);
		
		$dom.hasNot_('.baz');
		
		model.message = 'success';
		
		$dom
			.has_('.baz')
			.eq_('text', 'success')
			;
	},

	// BACKEND
	
	'$config': {
		'http.eval': function(done){
			include
				.instance()
				.js(
					'/.import/mask.node.js::Mask',
					'/lib/binding.node.js'
				)
				.done(function(resp){
					
					Object.extend(mask, resp.Mask.mask);
					
					var source = mask.getHandler(),
						target = resp.Mask.mask.getHandler()
						;
					
					for (var key in source) {
						if (target[key] == null && source[key] != null)  {
							target[key] = source[key];
							logger.log('>> Override'.red.bold, key);
						}
					}
					
					done();
				})
		}
		
	},
	
	'+if server' (done) {
		
		UTest
			.server
			.render(`
				#foo {
					if (foo) > 'bang'
					else > '?'
				}
			`, { foo: true }, (error, document, window) => {
				
				
				$(document)
					.find('#foo')
					.eq_('length', 1)
					.eq_('text', 'bang')
					;
				done();
			});
	},
	
	'+if server - binded' (done) {
		UTest
			.server
			.render(`
				#foo {
					+if (foo) > .trueContainer > 'bang'
					else > .falseContainer > 'big'
					
					footer > 'baz'
				}
			`, { foo: true }, (error, doc, win) => {
				
				window.$dom = $(doc);
				
				$has('#foo', true);
				$has('.trueContainer', true);
				$dom
					.find('#foo')
					.eq_('length', 1)
					.eq_('text', 'bangbaz')
					;
					
				has_(doc.body.innerHTML, 'expression');
				
				has_(doc.body.innerHTML, '.falseContainer');
				has_(doc.body.innerHTML, 'nodes:');
				
				
				
				notEq_(win.app, null);
				notEq_(win.app.model, null);
				eq_(win.app.model.foo, true);
				
				notEq_(win.app.model.__observers, null);
				eq_(win.app.model.__observers.foo.length, 1);
				
				win.app.model.foo = false;
				
				console.log('>> check trueContainer');
				$visible('.trueContainer', false);
				
				var container = $dom
					.find('.trueContainer')[0];
					
				container.style.display = 'none';
				console.log('manual - direct', $(container).css('display'));
				container.style.setProperty('display', 'none');
				console.log('manua - fn call', $(container).css('display'));
				
				$has('.falseContainer', true);
				
				
				$dom
					.find('#foo')
					.eq_('text', 'bangbigbaz')
					;
				done();
			});
		
	}
});