
UTest({
	
	'+for..of' () {
		loopTest('+for', `
			div { 
				+for (name of names) > 
					span > 
						"~[name]"; 
			}
		`);
	},
	'+each': function(){
		loopTest('+each', `
			div { 
				+each (names) > 
					span > 
						"~[.]"; 
			}
		`);
	},
	
	'+for..in' () {
		var template = `
				div { 
					+for ((key, name) in user) > 
						span > 
							"~[key]:~[name]"; 
				}
			`,
		
			model = {
				user: {
					foo: 'Foo',
					bar: 'Bar'
				}
			},
			controller = {},
			For;
		
		$dom = $render(template, model, null, null, controller);
		
		'> compo check'
		For = Compo.find(controller, '+for');
		notEq(For, null);
		
		eq_(For.components.length, 2);
		
		
		'> render check'
		$dom.has_('html', 'foo:Foo');
		$dom.has_('html', 'bar:Bar');
		
		'> reassign'
		model.user = { baz: 'Bazar' };
		
		$dom.hasNot_('html', 'foo:Foo');
		$dom.hasNot_('html', 'bar:Bar');
		$dom.has_('html', 'baz:Baz');
		
		'> dispose'
		Compo.dispose(For);
		eq_(model.__observers.user.length, 0);
	},
	
	
});


function loopTest(compoName, template){
	var model, $dom, compo;
	var controller = {};
	
	model = {
		names: ['foo', 'bar']
	};
	controller = {};
	
	$dom = $render(template, model, null, null, controller);
	
	'> compo check'
	compo = Compo.find(controller, compoName);
	
	notEq(compo, null);
	eq_(compo.parent, controller)
	eq_(compo.parent.components.length, 1);
	eq_(compo.components.length, 2);
	assert(compo.components[0].parent != null);
	
	'> render check'
	$dom.eq_('text', 'foobar');
	
	'> push'
	model.names.push('qux');
	$dom
		.has_('text', /qux$/)
		.has_('span', 3)
		;
		
	'> splice - remove'
	model.names.splice(0, 1);
	$dom.hasNot_('text', 'foo');
	
	'> splice - prepend' 
	model.names.splice(0, 0, 'foo');
	$dom.has_('text', /^foo/);

	'> sort'
	model.names.sort();
	$dom.eq_('text', 'barfooqux');
	
	'> reverse'
	model.names.reverse();
	$dom.eq_('text', 'quxfoobar');
	
	'> unshift'
	model.names.unshift('baz');
	$dom.eq_('text', 'bazquxfoobar');
	
	'> pop'
	model.names.pop();
	$dom.hasNot_('text', 'bar');
	
	'> shift'
	model.names.shift();
	$dom.eq_('text', 'quxfoo');
	
	'> reassign'
	model.names = ['a', 'b', 'c'];
	$dom.eq_('text', 'abc');
	
	'> splice - remove - add'
	model.names.splice(1, 2, 'd', 'e');
	$dom.eq_('text', 'ade');
	
	'> dispose'
	eq_(controller.components.length, 1);
	
	Compo.dispose(compo);
	//eq_(controller.components.length, 0);
	eq_(model.__observers.names.length, 0);
}
